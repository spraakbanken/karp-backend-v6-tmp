openapi: 3.0.2
info:
  title: Karp API
  version: 0.8.1
  description: |
    Karp TNG

    Very cool!
  x-logo:
    url: 'https://spraakbanken.gu.se/karp/img/karplogogr.png'
  contact:
    name: SprÃ¥kbanken
    url: 'https://spraakbanken.gu.se/'
    email: sb-info@svenska.gu.se
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'
servers:
  - url: 'https://karp-tng-backend-https-os-sample-python.os-dev.spraakbanken.gu.se/'
    description: Under development
tags:
  - name: Querying
  - name: Editing
  - name: Statistics
  - name: History
  - name: Inflection
  - name: Configuration
paths:
  '/{resources}/query':
    get:
      tags:
        - Querying
      summary: Get lexical entries
      description: >
        Returns a list of entries matching the given query in the given
        lexicons. The results are mixed from all resources.
      parameters:
        - $ref: '#/components/parameters/Query'
        - $ref: '#/components/parameters/FromPage'
        - $ref: '#/components/parameters/SizePage'
        - $ref: '#/components/parameters/PathResources'
        - $ref: '#/components/parameters/SortBy'
        - $ref: '#/components/parameters/LexiconStats'
        - $ref: '#/components/parameters/IncludeFields'
        - $ref: '#/components/parameters/ExcludeFields'
        - $ref: '#/components/parameters/ResultFormat'
        - $ref: '#/components/parameters/ResultFormatQuery'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResult'
        '500':
          description: Query failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralError'
  '/{resource}/{entry_ids}':
    get:
      tags:
        - Querying
      summary: Get lexical entries by id
      description: >
        Returns a list of entries matching the given ids
      parameters:
        - $ref: '#/components/parameters/SingleResource'
        - $ref: '#/components/parameters/EntryIds'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetEntriesResult'
        '500':
          description: Query failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralError'
  '/{resources}/query_split':
    get:
      tags:
        - Querying
      summary: Get lexical entries per lexicon
      description: >
        Returns a list of entries matching the given query in the given
        lexicons. The results are mixed from all resources.
      parameters:
        - $ref: '#/components/parameters/Query'
        - $ref: '#/components/parameters/FromPage'
        - $ref: '#/components/parameters/SizePage'
        - $ref: '#/components/parameters/PathResources'
        - $ref: '#/components/parameters/SortBy'
        - $ref: '#/components/parameters/LexiconStats'
        - $ref: '#/components/parameters/IncludeFields'
        - $ref: '#/components/parameters/ExcludeFields'
        - $ref: '#/components/parameters/ResultFormat'
        - $ref: '#/components/parameters/ResultFormatQuery'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuerySplitResult'
        '500':
          description: Query failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralError'
  '/{resource}/add':
    post:
      tags:
        - Editing
      summary: Add entry to resource
      parameters:
        - $ref: '#/components/parameters/SingleResource'
      requestBody:
        description: TODO
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddEntry'
      responses:
        '201':
          description: Successful add
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewID'
        '500':
          description: Add failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralError'
  '/{resource}/{id}/update':
    post:
      tags:
        - Editing
      summary: Update an existing entry in resource
      parameters:
        - $ref: '#/components/parameters/SingleResource'
        - $ref: '#/components/parameters/IdParam'
        - name: force
          in: query
          required: false
          description: >
            If true, the update will be done even though there is a version
            conflict.
          schema:
            type: string
      requestBody:
        description: The entry object with a version and a message
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                entry:
                  $ref: '#/components/schemas/Entry'
                version:
                  type: number
                  description: Use latest version seen when fetching the object to edit
      responses:
        '200':
          description: Successful update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewID'
        '500':
          description: Update failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralError'
  '/{resource}/{id}/delete':
    delete:
      tags:
        - Editing
      summary: Delete entry from resource
      parameters:
        - $ref: '#/components/parameters/SingleResource'
        - $ref: '#/components/parameters/IdParam'
      responses:
        '204':
          description: Succesful delete
        '500':
          description: Delete failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralError'
  '/{resource}/stats/{field}':
    get:
      tags:
        - Statistics
      summary: Get all current values in field
      parameters:
        - $ref: '#/components/parameters/SingleResource'
        - $ref: '#/components/parameters/FieldReference'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatsResult'
        '500':
          description: Failed request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralError'
  '/{resource}/{id}/diff':
    post:
      tags:
      - History
      summary: Get diff of two entries
      description: |
        - If no parameters are given, diff is between first and last version of entry.
        - If `to_date` or `to_version` is not given, diff against latest version
        - If `from_date` or `from_version` is not given, diff against first version
        - If both `from_date` and `from_version` is given, use `from_version` and same for `to_date`/`to_version`
        - If an entry is sent in the request body, this will be used and `to_version` and `to_date` will be ignored.
      parameters:
      - $ref: '#/components/parameters/SingleResource'
      - $ref: '#/components/parameters/IdParam'
      - $ref: '#/components/parameters/FromVersion'
      - $ref: '#/components/parameters/ToVersion'
      - $ref: '#/components/parameters/FromDate'
      - $ref: '#/components/parameters/ToDate'
      requestBody:
        description: An entry object to diff against
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Entry'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HistoryDiff'
        '500':
          description: Diff failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralError'
  '/{resource}/history':
    get:
      tags:
      - History
      summary: Query history of resource
      description: |
        - `from_version` and `to_version` can only be used when `entry_id` is given
      parameters:
      - $ref: '#/components/parameters/SingleResource'
      - $ref: '#/components/parameters/EntryIdParamQuery'
      - $ref: '#/components/parameters/FromVersion'
      - $ref: '#/components/parameters/ToVersion'
      - $ref: '#/components/parameters/FromDate'
      - $ref: '#/components/parameters/ToDate'
      - $ref: '#/components/parameters/HistoryCurrentPage'
      - $ref: '#/components/parameters/HistoryPageSize'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HistoryResult'
        '500':
          description: Diff failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralError'
  '/{resource}/{id}/{version}/history':
    get:
      tags:
      - History
      summary: Get a specific version of an entry
      parameters:
      - $ref: '#/components/parameters/SingleResource'
      - $ref: '#/components/parameters/IdParam'
      - $ref: '#/components/parameters/Version'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultEntry'
        '500':
          description: Not OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralError'
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: query
      name: secret_key
  parameters:
    SingleResource:
      name: resource
      in: path
      required: true
      description: The resource to perform operation on
      schema:
        type: string
    IdParam:
      name: id
      in: path
      required: true
      description: The id to perform operation on
      schema:
        type: string
    Version:
      name: version
      in: path
      required: true
      description: The version to perform operation on
      schema:
        type: integer
    EntryIdParamQuery:
      name: entry_id
      in: query
      required: true
      description: The id to perform operation on
      schema:
        type: string
    EntryIds:
      name: entry_ids
      in: path
      required: true
      description: Comma-separated. The ids to perform operation on.
      schema:
        type: string
        minimum: 1
    FromPage:
      name: from
      in: query
      required: false
      description: From
      schema:
        type: number
        default: 0
    SizePage:
      name: size
      in: query
      required: false
      description: Number of entries in page
      schema:
        type: number
        default: 25
    FieldReference:
      name: field
      in: path
      required: true
      description: A field name
      schema:
        type: string
    PathResources:
      name: resources
      in: path
      required: true
      description: A comma-separated list of resource identifiers
      schema:
        type: array
        items:
          type: string
    FromVersion:
      name: from_version
      description: An entry version number
      in: query
      required: false
      schema:
        type: integer
    ToVersion:
      name: to_version
      description: An entry version number
      in: query
      required: false
      schema:
        type: integer
    FromDate:
      name: from_date
      description: A timestamp in Unix Epoch time
      in: query
      required: false
      schema:
        type: integer
    ToDate:
      name: to_date
      description: A timestamp in Unix Epoch time
      in: query
      required: false
      schema:
        type: integer
    HistoryCurrentPage:
      name: current_page
      description: The current page, default 0
      in: query
      required: false
      schema:
        type: integer
    HistoryPageSize:
      name: page_size
      description: The wanted page size, default 100
      in: query
      required: false
      schema:
        type: integer
    SortBy:
      name: sort
      in: query
      description: >
        The `field` sort by. If missing, default order for each resource will be
        used.


        <span style="color: red">Do we need sort order per resource?</span>


        Format: `lemma|asc` or `pos|desc`
      schema:
        type: string
    LexiconStats:
      name: lexicon_stats
      in: query
      description: Show the hit count per lexicon
      schema:
        type: boolean
        default: true
    IncludeFields:
      name: include_fields
      in: query
      description: Comma-separated list of which fields to return
      schema:
        type: string
        default: All field are returned
    ExcludeFields:
      name: exclude_fields
      in: query
      description: Comma-separated list of which fields to remove from result
      schema:
        type: string
        default: No fields are excluded
    ResultFormat:
      name: format
      in: query
      description: Will return the result in the specified format
      schema:
        type: string
        enum:
          - json
          - csv
          - xml
          - lmf?
          - tsb
        default: json
    ResultFormatQuery:
      name: format_query
      in: query
      description: |
        Will return each entry in the specified format (encoded in JSON-field)

        <span style="color: red">Why is it called format query?</span>
      schema:
        type: string
        enum:
          - json
          - csv
          - xml
          - lmf?
          - tsb
        default: json
    Query:
      name: q
      in: query
      required: false
      description: |
        The query. If missing, all entries in chosen resources will be returned.

        ### Query DSL

        #### Query operators

        - `contains|<field>|<string>`
          Find all entries where the field `<field>` contains `<string>`.
          More premissive than `equals`.

        - `endswith|<field>|<string>`
          Find all entries where the field `<field>` ends with `<string>`

        - `equals|<field>|<string>`
          Find all entries where `<field>` equals `<string>`.
          Stricter than `contains`

        - `exists|<field>`
          Find all entries that has the field `<field>`.

        - `freetext|<string>`
          Search in all fields for `<string>` and similar values.

        - `freergxp|<regex.*>`
          Search in all fields for the regex `<regex.*>`.

        - `gt|<field>|<value>`
          Find all entries where `<field>` is greater than `<value>`.

        - `gte|<field>|<value>`
          Find all entries where `<field>` is greater than or equals `<value>`.

        - `lt|<field>|<value>`
          Find all entries where `<field>` is less than `<value>`.

        - `lte|<field>|<value>`
          Find all entries where `<field>` is less than or equals `<value>`.

        - `missing|<field>`
          Search for all entries that doesn't have the field `<field>`.

        - `regexp|<field>|<regex.*>`
          Find all entries where the field `<field>` matches the regex `<regex.*>`.

        - `startswith|<field>|<string>`
          Find all entries where `<field>`starts with `<string>`.

        #### Logical Operators

        The logical operators can be used both at top-level and lower-levels.

        - `not||<expression>`
          Find all entries that doesn't match the expression `<expression>`.

        - `and||<expression1>||<expression2>`
          Find all entries that matches `<expression1>` AND `<expression2>`.

        - `or||<expression1>||<expression2>`
          Find all entries that matches `<expression1>` OR `<expression2>`.

        #### Regular expressions
        - Always matches complete tokens.


        #### Examples
        - `not||missing|pos`
        - `and||freergxp|str.*ng||regexp|pos|str.*ng`
        - `and||missing|pos||equals|wf||or|blomma|Ã¤pple`
        - `and||equals|wf|sitta||not||equals|wf|satt`
      schema:
        type: string
  schemas:
    DistributionResult:
      type: object
      additionalProperties:
        type: integer
      description: Only present if `lexicon_stats=true`
      example:
            places: 123
            municipalities: 6
    GeneralError:
      type: object
      required:
        - error
        - errorCode
      properties:
        error:
          type: string
          example: Some error message
        errorCode:
          type: integer
          description: |
            The current error codes are:
            ```
            NOT_SPECIFIED = 0
            RESOURCE_DOES_NOT_EXIST = 20
            RESOURCE_NOT_PUBLISHED = 21
            ENTRY_NOT_FOUND = 30
            ENTRY_NOT_CHANGED = 31
            ENTRY_NOT_VALID = 32
            VERSION_CONFLICT = 33
            EXPIRED_JWT = 40
            NOT_PERMITTED = 41
            BAD_PARAMETER_FORMAT = 50
            ```
        diff:
          $ref: '#/components/schemas/DiffResult'
    QueryResult:
      type: object
      required:
        - total
        - hits
      properties:
        total:
          type: integer
          description: Total number of matches
          example: 6278
        hits:
          description: The matching entries.
          type: array
          items:
            $ref: '#/components/schemas/ResultEntry'
        distribution:
          $ref: '#/components/schemas/DistributionResult'
      example:
        total: 26
        hits:
          - id:  "8724"
            resource:  "places"
            version:  1
            entry:
              code:  8724
              name:  "LuleÃ¥"
          - id:  "2580"
            resource:  "municipalities"
            version:  1
            entry:
              code:  2580
              name:  "LuleÃ¥ kommun"
              region:  "Norrbotten"
              state:  "Norrbottens lÃ¤n"
        distribution:
          places: 25
          municipalities: 1
    GetEntriesResult:
      type: object
      required:
        - total
        - hits
      properties:
        total:
          type: integer
          description: Total number of matches
          example: 6278
        hits:
          description: The matching entries.
          type: array
          items:
            $ref: '#/components/schemas/ResultEntry'
    QuerySplitResultHits:
      type: object
      description: The matching entries per resource.
      additionalProperties:
        type: array
        items:
          $ref: '#/components/schemas/ResultEntry'
    QuerySplitResult:
      type: object
      required:
        - total
        - hits
      properties:
        total:
          type: integer
          description: Total number of matches
          example: 6278
        hits:
          $ref: '#/components/schemas/QuerySplitResultHits'
        distribution:
          $ref: '#/components/schemas/DistributionResult'
      example:
        total: 26
        hits:
          places: [
              {
                id:  "8724",
                resource:  "places",
                version:  1,
                entry: {
                  code:  8724,
                  name:  "LuleÃ¥"
                }
              }
            ]
          municipalities: [
              {
                id:  "2580",
                resource:  "municipalities",
                version:  1,
                entry: {
                  code:  2580,
                  name:  "LuleÃ¥ kommun",
                  region:  "Norrbotten",
                  state:  "Norrbottens lÃ¤n",
                }
              }
            ]
        distribution:
          places: 25
          municipalities: 1
    ResultEntry:
      type: object
      description: Hits entry schema
      properties:
        id:
          type: string
        version:
          type: integer
        resource:
          type: string
          description: Name of the resource where this entry was found.
          example: places
        entry:
          $ref: '#/components/schemas/Entry'
        last_modified:
          type: integer
          description: Timestamp of when the entry was last modified in Unix Epoch time
        last_modified_by:
          type: string
          description: Identifier of the user who made the last change in the entry
      required:
          - id
          - version
          - resource
          - entry
          - last_modified
          - last_modified_by
      example:
        id: '1410'
        version: 2
        resource: places
        last_modified_by: karpuser
        last_modified: 1556106754
        entry: {}
    AddEntry:
      type: object
      properties:
        message:
          type: string
        entry:
          $ref: '#/components/schemas/Entry'
    Entry:
      type: object
      description: Actual schema different for each resource
      additionalProperties: {}
      example:
        pos: nn
        lemgram: apa..nn.1
        baseform: apa
        v_saldo:
          saldo: apa..1
          primary: djur..1
          secondary:
            - primat..1
    NewID:
      type: object
      properties:
        newID:
          type: string
    StatsResultEntryValue:
      oneOf:
        - type: string
        - type: integer
        - type: boolean
        - type: number
      description: A value that occurs for field in given resource
      example: NN
    StatsResultEntry:
      type: object
      required:
        - value
        - count
      properties:
        count:
          type: integer
          description: Total number of occurences of value in given resource
          example: 6278
        value:
          $ref: '#/components/schemas/StatsResultEntryValue'
    StatsResult:
      type: array
      items:
        $ref: '#/components/schemas/StatsResultEntry'
    HistoryDiff:
      type: object
      properties:
        diff:
          $ref: '#/components/schemas/DiffResult'
    HistoryResult:
      type: object
      properties:
        history:
          type: array
          items:
            $ref: '#/components/schemas/HistoryEntry'
        total:
          type: integer
          description: total number of hits
    HistoryEntry:
      type: object
      properties:
        entry_id:
          type: string
          description: Entry ID
        user_id:
          type: string
          description: User ID
        version:
          type: integer
          description: Version of entry that history entry refers to
        messsage:
          type: string
          description: Message given by user when updating
        op:
          type: string
          description: What type of operation was done on entry
          enum:
          - ADD
          - DELETE
          - UPDATE
        timestamp:
          type: integer
          description: A timestamp in Unix Epoch time
        diff:
          $ref: '#/components/schemas/DiffResult'
    DiffResult:
      type: array
      description: |
        Description of what has been modified from one version to another
      items:
        type: object
        required:
        - type
        - field
        properties:
          type:
            type: string
            description: What type of operation was done on field
            enum:
            - CHANGE
            - REMOVED
            - ADDED
            - TYPECHANGE
          field:
            type: string
            description: The field that was changed
          before:
            description: Value before update
          after:
            description: Value after update